{"ast":null,"code":"// ELEMENT: Toggle view of password input\nexport function togglePasswordView(passwordElementName, buttonElementName) {\n  const passwordElement = document.getElementById(passwordElementName);\n  const buttonElement = document.getElementById(buttonElementName);\n  if (passwordElement.type === \"password\") {\n    passwordElement.type = \"text\";\n    buttonElement.src = \"/imgs/Hide Button.png\";\n  } else {\n    passwordElement.type = \"password\";\n    buttonElement.src = \"/imgs/View Button.png\";\n  }\n}\n\n// FEATURE: Encrypt and send login request to server for validation.\nexport function sendLoginRequest(usernameElement, passwordElement) {\n  // Retrieve username and password from UI\n  const usernameValue = document.getElementById(usernameElement).value;\n  const passwordValue = document.getElementById(passwordElement).value;\n\n  // Construct login request\n  const loginRequest = {\n    username: usernameValue,\n    password: passwordValue\n  };\n\n  // Send request to server\n  fetch('http://localhost:3001/api/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(loginRequest)\n  }).then(response => response.json()).then((data, response) => {\n    console.log('Login response:', data);\n\n    // If status within range of 200s\n    if (response.ok) {\n      console.log('Login successful!');\n    } else {\n      console.error('Login failed:', data.error || 'Unknown error');\n    }\n  }).catch(error => {\n    console.error('Error sending login request:', error);\n  });\n}\n\n// FEATURE: Encrypt and send signup request to server for validation.\nexport function sendSignupRequest(usernameElement, passwordElement) {\n  // Retrieve username and password from UI\n  const usernameValue = document.getElementById(usernameElement).value;\n  const passwordValue = document.getElementById(passwordElement).value;\n\n  // Construct signup request\n  const signupRequest = {\n    username: usernameValue,\n    password: passwordValue\n  };\n\n  // Send request to server\n  fetch('http://localhost:3001/api/signup', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(signupRequest)\n  }).then(response => {\n    // Check if the response was successful (HTTP status in the 2xx range)\n    if (response.ok) {\n      // Handle successful response\n      console.log('Signup successful!');\n      return response.json();\n    } else {\n      // Handle unsuccessful response (non-2xx status)\n      console.error('Signup failed:', response);\n      throw new Error('Signup failed');\n    }\n  }).then(data => {\n    // Further actions for a successful response\n    console.log('Signup response:', data);\n  }).catch(error => {\n    console.error('Error sending signup request:', error);\n    // Handle errors\n  });\n}","map":{"version":3,"names":["togglePasswordView","passwordElementName","buttonElementName","passwordElement","document","getElementById","buttonElement","type","src","sendLoginRequest","usernameElement","usernameValue","value","passwordValue","loginRequest","username","password","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","ok","error","catch","sendSignupRequest","signupRequest","Error"],"sources":["/Users/evelynzhang/Documents/Nyeow/src/nyeow/Scripts/AccountScript.js"],"sourcesContent":["// ELEMENT: Toggle view of password input\nexport function togglePasswordView(passwordElementName, buttonElementName) {\n    const passwordElement = document.getElementById(passwordElementName);\n    const buttonElement = document.getElementById(buttonElementName);\n\n    if (passwordElement.type === \"password\") {\n        passwordElement.type = \"text\";\n        buttonElement.src = \"/imgs/Hide Button.png\";\n    } else {\n        passwordElement.type = \"password\";\n        buttonElement.src = \"/imgs/View Button.png\";\n    }\n}\n\n// FEATURE: Encrypt and send login request to server for validation.\nexport function sendLoginRequest(usernameElement, passwordElement) {\n    // Retrieve username and password from UI\n    const usernameValue = document.getElementById(usernameElement).value;\n    const passwordValue = document.getElementById(passwordElement).value;\n\n    // Construct login request\n    const loginRequest = {\n        username: usernameValue,\n        password: passwordValue,\n    };\n\n    // Send request to server\n    fetch('http://localhost:3001/api/login', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(loginRequest),\n    })\n    .then(response => response.json())\n    .then((data, response) => {\n        console.log('Login response:', data);\n\n        // If status within range of 200s\n        if (response.ok) {\n            console.log('Login successful!');\n        } else {\n            console.error('Login failed:', data.error || 'Unknown error');\n        }\n    })\n    .catch(error => {\n        console.error('Error sending login request:', error);\n    });\n}\n\n// FEATURE: Encrypt and send signup request to server for validation.\nexport function sendSignupRequest(usernameElement, passwordElement) {\n    // Retrieve username and password from UI\n    const usernameValue = document.getElementById(usernameElement).value;\n    const passwordValue = document.getElementById(passwordElement).value;\n\n    // Construct signup request\n    const signupRequest = {\n        username: usernameValue,\n        password: passwordValue,\n    };\n\n    // Send request to server\n    fetch('http://localhost:3001/api/signup', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(signupRequest),\n    })\n    .then(response => {\n        // Check if the response was successful (HTTP status in the 2xx range)\n        if (response.ok) {\n            // Handle successful response\n            console.log('Signup successful!');\n            return response.json();\n        } else {\n            // Handle unsuccessful response (non-2xx status)\n            console.error('Signup failed:', response);\n            throw new Error('Signup failed');\n        }\n    })\n    .then(data => {\n        // Further actions for a successful response\n        console.log('Signup response:', data);\n    })\n    .catch(error => {\n        console.error('Error sending signup request:', error);\n        // Handle errors\n    });\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}